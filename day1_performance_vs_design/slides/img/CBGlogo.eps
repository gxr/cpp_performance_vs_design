%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 9.0%%For: (MPI-CBG - ) (MPI-CBG)%%Title: (CBG_text_outline.eps)%%CreationDate: 01.09.2003 13:04 Uhr%%BoundingBox: 59 154 737 434%%HiResBoundingBox: 59.3047 154.6143 736.3281 433.1074%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 1 1 0 1 1 1 1 8.504 0 0 0 0 0 0 0 0 131071 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 421.5 297.5 421.5 297.5%AI3_TileBox: 10.5 8.5 802.5 585.5%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 842 595%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -160.5 580.5 1 1009 720 18 1 0 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:10.5 8.5%%AI3_PaperRect:-10 585 832 -10%%AI3_Margin:10 -8 -40 10%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI7_Thumbnail: 128 56 8%%BeginData: 8802 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD32FFA8067EFD7DFF7E0653FD7DFFA80659FD5FFFA7CFA8A883AE%FD18FF7E0653FD5AFFA8832D835858042D2D5858FD0483FD14FFA8065AFD%57FFA8832D2D5858042D275858582D27042D042D2D83CFFD11FF7E0653FD%56FF582D27582D2D042D7C7C2D2D042D58837C7C582D2D5758FD10FFA806%7EFD09FFA9535328535384FD04FFA87E537E5353537EA8FD09FFA87E532F%287E7EA9FD26FFA82D272D5804272D832D27042D587D2D2D042704FD042D%5858A8FD0EFF7E0653FD07FF7E29010601060106012829FFFF2F01060106%010601062FFD06FFA82806010601060106012FA8FD23FF83052D7C58052D%7C58052D2D83582D042D2D7C83A8587C58582D512D83FD0DFFA8067EFD06%FF53290628062F292F06290628FFFF292806535353062906282FFD04FF7E%06280629062F2829062806A8FD22FF58042D7D2D0458582D042D5858042D%2D8383582D27042D0427042D2D27042DA8FD0BFF7E0653FD05FF59060106%2FA9FD04FF592F01FFFF2F01067EFFFFFF53060106A8FFFF7E010601297E%FD04FF7E2F067EFD21FF580458582D047D2D2D2783582D042D83832D2D04%2D2D7D7D837C58587C58587CAEFD0BFFA80659FD04FFA82806067DFD08FF%84FFFF282806A8FD04FF282806A8FFFF06060653FD08FFA8A9FD20FF5804%58582704832D272D832D2704A7582D042D2D7D58580427042D0427042D04%27042DA8FD09FF7E0653FD04FF53010628FD0CFF2901067EFD04FF290106%7EFF28060129FD2AFF830458832D05832D2D2D83052D58AE2D2D057C8358%042D052D2D58588383A883A883835858FD09FFA8065AFD04FF062906FD0D%FF282906A8FD04FF062906FFFF290628A8FD29FFA8042D832D0483042D51%58042D7D58042D2DA72D2D0427047CA8AE58582D2D042D042D2D2D58A8FD%08FF7E0653FFFFFF7E060129FD0DFF2901067EFFFFFF5306017EFFA80106%28FD2AFF2D2DA82D0483272D5758042DA758042D7D7C042D045783FF582D%042D042D042D042D042D042D27AEFD07FFA8067EFFFFFFA8060628FD0DFF%2806062F282F2828067EFFFF7E060653FD06FF7EA87EA87EFD1EFF58277D%2D047C042D2D7D042D832D042D832D042D0483A8580427042D045858A7A8%FD04FF837D5858FD07FF7E0653FFFFFF53060153FD0DFF2F010601060106%010628A8FF53010653FD05FFA806010601067EFD1DFF2D587C0558582D57%83042D832D042DA82D042D57FF832D052D045883FFFFAE587C2D582D512D%7C58A8FD07FFA8067EFFFFFFA8062828FD0DFF2928067E7E84532F062806%FF5928062FFD05FF530629062806A8FD1CFF8327A7042D7D2704A8042758%58042DA82D042758FF5127042D2DAEFFAE582D042D042D042D0427042D04%58FD06FF7E0653FFFFFF7E060106FD0DFF2F01067EFD04FF53010628A801%0606FD08FFA801067EFD1CFF2D832D2D7C2D04A72D2D2D7D042DA858042D%7CFF2D2D052D58FFCF58272D2D2D272D2D7C58A88358575704FD06FFA806%59FD04FF0628067EFD0CFF282806A8FD04FFA8280629A92806067EFD07FF%7E2806A8FD1BFFA82D7D2D2D7D042D832704AE04275883042757FF582704%2DA7FF83572D2D262D2D83FD0AFFA8FD05FF7E0653FD04FF53010606FD0C%FF2901067EFD05FF010601FF28060128A8FD06FF8401067EFD1BFF837C58%05A82D2DA82D0483572D2DFF2D2D2DFFA82D052DA7FFCF582D2D2D5883FD%04FFAE58582D582D5858AEFD05FFA8065AFD04FFA829062828FD07FFA959%FFFF282906A8FD04FF7D29062FFFA906280653FD06FF7E2906A8FD1BFF57%A8042D83272D83042DA82D04A8582D04A7FF2D042D58FFFF58FD042DA8FF%FFFFA858FD042D272D042D27FD05FF7E0653FD05FF590601060659A8FFA8%A8530601FFFF2901067EFFFFFF7E06010653FFFF590106012959FD04FF7D%01067EFD1BFF83582D7C5804832D2D7C580458FF2D042DFFA8042D2DFFFF%FF2D582D5883FFFFFFA8582D58FD062D042DAEFD04FFA8067EFD06FF7D28%06060628060606280606FFFF28060628282F0628060628FD04FF7E060606%2806060628060606A8FD1BFFA82D04FF042DA82704FF04277D83042758FF%582D0458FFFF83582D582DFD04FF7D2D582D572D51588383A77CAEFD04FF%7E0653FD07FF7E2F010601060106012959FFFF2F010601060106010629FD%06FFA8280601060106010606067EFD1BFFAE052D832D2D830458A82D2DFF%582D04FFFF582D2D7DFFFFFF585858590628062FFD045857A7FD0BFFA806%7EFD0AFF7E7E535A7EFD07FF7E7E535A537EA8FD09FFA9A8535A537EA8FF%7EFD1CFF582D5858047C2D277C83042DFF2D042DFFFF2D2D2D83FFFFA8FD%0458060106065858585183FD0CFF7E0653FD4BFF5804A82D2D832D04A858%2D58FF042D2DFFFF582D5758FFFF292E7C58832828062858835858A8FD05%FF582D58FD04FFA80659FD4BFF2D27832D04FF042DFF2D0458FF27042DFF%FF2D2D2D57A82901285883585901060159587C582FFFFFFFAE2D2D2D58FD%04FF7E0653FD4BFF2D04FF052DFF2D05FF2D2D83FF042D2DFFFFA72D5851%58062806597D83832F06282E837D83287EFFFF58582D2D83FD04FFA8065A%FD05FFA8FD0CFFA8A8A8FF52FD0AFFA8A8FFFFFFA8FD0AFFA8A8FD18FF04%27FF2D2DFF042DFF2D0458FF2D042DA8FFFF582D5857520606017D83837D%2801067D83582E06FFFF582D2D2DA8FD04FF7E0653FD05FF2752FF5252FD%08FF5227277D27FD04FFA8FD05FF527DFFFFFF7D52FFA8FD05FF52A8A8A8%527DFD04FF527DFD10FF5704FF0457FF2D04FF2D2D57FF512D0558FFFFA8%FD04587D06060683A7A87D280653838358067DAE57582D2DFD05FFA8067E%FD05FF52F827F87D7D27527D2727A8FF27A8F8A8F8A82752A82727A8FF52%277D52277DFF7D7D7D2727FF52527D27527D5227277D2752522727FF5252%A8FD0CFF2D2DFF2704FF0427A858042DFFA7042D04AEFFFFA858587C5883%06060184A8A8530606837C830653A8582D2D2DFD05FF7E0653FD05FF277D%F87D52A82752FF2752FFFF52527DFF27A852F8A8F8A8277D52FF522727FF%FF7D527D52277D2727FFF8A8527D27A85252277D27A87D2727A8FD0CFF83%05FF042DFF2D04A7582D04FFFF582D2D2DAEFFFF062F588383A82E2928AF%A8FF282853A7832F28FF58582D83FD05FFA8067EFD05FF52A8FF7D7D5227%277D2727A8FF27A8FFFFF8A827277D27A852FF52527D5227A8FFFD047D27%A85227A87D527D7D7D27FF27277D7D27FF2727FD0DFFA82DFF2704AE2D27%2DAE042758FFA7FD042D7DA80601062E8383A8530628AFA8A806287D832E%29A8582D2D7DFD05FF7E0653FD05FFA8FFFFFFA8FFA8A8A8FFA8FFFFA8A8%FFFFA8FFFFA8FF7DFFA8FFA8FFA8FFA8FFFFFFA8FFFD05A8FFA8A8A8FFFF%A8FFFFA8FFFFA8FFFFA8FD0EFF2DA82D2D7D83042DFF57042DA8FF832D2D%5851582E2806060684A8AE59282FFFA859067D7D8328FF57582DFD06FFA8%0659FD4CFF837D580458A82D047D7D2D042DFFFFA7512D582D5858590606%017DA8AE530659A87D2828835853FF582D7CFD06FF7E0653FD4DFF837D2D%2DFF2D2D2DFF572D0458FFFFFFA858585883588352290684A8FF2829A8AE%53287D837DFF5858AEFD06FFA8065AFD09FFA827A87D7DFFFF7DFD04FF52%A8FD09FFA827FD08FFA85252A8FFFFFF527D52A8FFA8527DFF52A8FFFFFF%7D27FD0CFF83FF04278383042758FF2D27042D83FFFFFFA87D527C588358%28068383A80159838301595883FF8358FD07FF7E0653FD05FFA87DA8A8F8%7DFFA8F87D2727FF7D7DFF27A8A87DFFFF7DA87DFF52A8F8FF7DA8FF7D7D%FFA827F87D7DFF7DFF277D27A8FF7D52277DA8A8A852FF5252A87DA8FFA8%7D527DA87DFD04FF580458FF2D042DA8FF2D2D042D58A7AEFFFF59287D7C%83592828A8835306837D2F2E7C58FF83FD08FFA8067EFD05FF272752A827%A8FFA827F827F8A827277D52A87D277D7D527D52A827A8277D7DF8FFF87D%FFA8F8A8FFFF522752527D52A8FF7D27F8A827A82752527D52522727A827%FD045227FD04FF832D04AE832D042DA8FF512D042D2D2D58AEFF28015958%8352065283580658832E535858A8FD09FF7E0653FD05FF2752F8FFF8FFFF%A8277D7D277D27275227A8277D7D5252A8277DF8A8F8A82727A827FFFFA8%27277D7D27277D277D27A8FF7D522752527D275227FD0452F8A82752FFA8%F87DFD05FF2D2D2DFF582D0458CFFF83572D2D2D58577CA82F06597C8328%287D8328535883FF5858FD0AFFA8067EFD06FF527DFF52FFFFA87DFFFF52%FF7D52A87DA8FF52A8FF527DFF5252A852A85252A827FFFFFF7D5252A8FF%52A87D7D7DA8FF7D527DFF52FFA8527DA852FF527DFF27277DFF27A8FD05%FFAE042758FF2D27042DA8FFFF832D2D2D582D5883590658585901525853%285858CF5858AEFD09FF7E0653FD45FF27275252A8FD07FF7D042DA7FF51%2D042D58FFFFFFA7582D58575883FF597C58532E7C58FF5858A7A7FD0BFF%A80659FD52FF58042DA8FF2D27042D2DA7FFFFFF832D582D58A8FF58587D%FF5858A87D2D83A8FD0BFF7E0653FD0EFF7DFD04FFA8FD0EFFA8A8FD2FFF%83052DCFFF7C2D052D0458FFFFFFAE2D582DA8FF835883FF7C58CF5883FD%0DFFA8065AFD0EFFF8FFFFA8F82752FD0BFF52FF7DFD31FFA82D2DFFFF83%2D0427042DA8FFFF582D2D51FF835858FF5858A7FD0FFF7E0653FD05FF7D%277D7D2752A8A8F827FFFFF852A87DFF5252A8F827A8FF27A852277D27FF%7D27A85227A8FD2CFF7C58FFFFA82D042D042DCFFFAE582D51FFAE2D58FF%587CFD10FFA8067EFD05FFA827527D7D27A827A8F8FFFF275252527D2752%7D52527D522727A852FFF8FF27A8A82752FD2FFFA7FFFFA82D04270458FF%FF2D2D2DA8A82D2DFFA8FD11FF7E0653FD05FF2727277D52527D7D2727FF%FF27272752A82727A8277D52A82752A8277D27FF5227A82727A8FD33FF2D%042D05FFFF582D2DA8FFA8FD14FFA8067EFD06FFA8A8A8FFA8FFFFFF7DFF%FFFFA8A8A8FFA8A8FFFFA8FFFFFFA8FFA8FFA8FFFFA8FFA8FD37FF83A7A8%FFA8FD19FF7E0653FD7DFFA80659FD7DFF7E0653FD7DFFA9297EFDFCFFFD%CEFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	/currentoverprint { _of } def	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		currentoverprint{			rectImage		}{			_enabledSmoothShade{				fillRamp			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					_inDistiller{						false					}{						false						currentpagedevice/SeparationColorNames get{name eq or}forall						not					}ifelse				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					]					_inDistiller {						/DeviceCMYK [							spot1 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 1								}{									0 0 0 0 0								}ifelse						 end							spot2 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 2								}{									0 0 0 0 0								}ifelse						 end							5 1 roll 6 -2 roll add							dup 1 eq {								pop								8 /index cvx 1 /exch cvx /sub cvx								9 1 /roll cvx							}{								2 eq {									8 /index cvx 1 /exch cvx /sub cvx									10 1 /roll cvx								}if							}ifelse							4 1 /roll cvx 5 -2 /roll cvx							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx							3 1 /roll cvx 4 -2 /roll cvx							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx							2 1 /roll cvx 3 -2 /roll cvx							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx							6 -2 /roll cvx /pop cvx /pop cvx						] cvx bind					}{						/DeviceCMYK {}					}ifelse				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeMultiPassSeps{	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C0_Space /DeviceGray pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C1_Space /DeviceGray pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 201 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_bbox 4 array pt	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						currentoverprint not or and						_noImage not and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inDistiller		systemdict /currentdistillerparams known	def	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse		_inDistiller or	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		/_useShells get /_usingShells xp	}{		/_usingShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_forceToCMYK where{		pop	}{		/_forceToCMYK false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		%	/sampFunc{		/_tmp exch pt		bd			_tmp length 1 eq {				_tmp 0 get				/_tmp 2 string pt				dup _tmp 0 3 -1 roll put				_tmp 1 3 -1 roll put			}if			/FunctionType 0			/Order 1			/Size [_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource _tmp			/Range [0 1]		ed	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne _rgbInCMYK or{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			/_rgbInCMYK false pt		_producingSeps _forceToCMYK or _rgbRamp and {			_spotColor{				_renderCMYK			}{				_isCMYKSep			}ifelse		}{			false		}ifelse		{			_compositeJob{				/_rgbInCMYK true pt				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				dup length string copy /_kData exch pt				dup length string copy /_yData exch pt				dup length string copy /_mData exch pt				dup length string copy /_cData exch pt			}{				_rampFuncsArray _index					_cyanPlate{_cyanData}if						_magentaPlate{_magentaData}if						_yellowPlate{_yellowData}if						_blackPlate{_blackData}if					_nSamples expandOne					sampFunc					dup begin /Decode [1 0] def end				put				/_invert false pt			}ifelse		}{			_rampFuncsArray _index				bd					/FunctionType 2					/Domain [0 1]					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div					_gradType 0 eq{						_invert{/C1}{/C0}ifelse _C0						_invert{/C0}{/C1}ifelse _C1					}{						_invert{/C0}{/C1}ifelse _C1						_invert{/C1}{/C0}ifelse _C0					}ifelse				ed			put		}ifelse				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp _forceToCMYK not and{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			_forceToCMYK{				3 npop setcmykcolor			}{				setrgbcolor 4 npop			}ifelse		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			_forceToCMYK{				6 npop setcmykcolor			}{				3 -1 roll pop pop				1 exch sub /_tmp xp				3{					1 exch sub _tmp mul 1 exch sub 3 1 roll				}repeat				setrgbcolor 				4 npop			}ifelse		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and _forceToCMYK not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _enabledSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_usingShells currentoverprint _producingSeps and _usingShells or pt	/_firstShell true pt	_enabledSmoothShade not{		currentoverprint _producingSeps and{						newpath			clippath pathbbox 			1 add 4 1 roll			1 add 4 1 roll			1 sub 4 1 roll			1 sub 4 1 roll			_bbox astore pop						newpath			_bbox 0 get _bbox 1 get moveto			_bbox 2 get _bbox 1 get lineto			_bbox 2 get _bbox 3 get lineto			_bbox 0 get _bbox 3 get lineto			closepath			6 copy			gsave _bUMatrix astore concat			1 0 moveto 0 0 1 0 360 arc closepath			eoclip fill			popBSpace		}{			fill		}ifelse	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{		radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt			_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			%		%		true		_producingSeps _rgbRamp not and{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_usingShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_usingShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_usingShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec1 Bn%AI5_BeginGradient: (Unnamed gradient)(Unnamed gradient) 1 2 Bd[<00010102030304050506070808090A0B0B0C0D0E0E0F101111121314151516171819191A1B1C1D1D1E1F2021212223242525262728292A2A2B2C2D2E2E2F3031323333343536373838393A3B3C3D3D3E3F4041424343444546474848494A4B4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F6061616263646566676768696A6B6C6D6E6E6F70717273747575767778797A7B7C7C7D7E7F80818283848485868788898A8B8C8C8D8E8F90919293949495969798999A9B9C9C9D9E9FA0A1A2A3A4A4A5A6A7A8A9AAABACADADAEAFB0B1B2B3B4B5B6B6B7B8B9BABBBCBDBEBFBFC0C1C2C3C4C5C6C7C8C9C9>0<000101020304040506070808090A0B0C0C0D0E0F1011121213141516171818191A1B1C1D1E1F1F20212223242526272728292A2B2C2D2E2F30303132333435363738393A3A3B3C3D3E3F40414243444546474748494A4B4C4D4E4F50515253545555565758595A5B5C5D5E5F60616263646566676768696A6B6C6D6E6F707172737475767778797A7B7C7D7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDE><000001010202030304040505060607070809090A0A0B0B0C0C0D0D0E0F0F1010111112131314141515161717181819191A1B1B1C1C1D1D1E1F1F20202122222323242425262627272829292A2A2B2C2C2D2D2E2F2F30303132323333343535363637383839393A3B3B3C3C3D3E3E3F40404141424343444445464647484849494A4B4B4C4C4D4E4E4F50505151525353545555565657585859595A5B5B5C5D5D5E5F5F606061626263646465656667676869696A6A6B6C6C6D6E6E6F707071717273737475757676777878797A7A7B7C7C7D7D7E7F7F8081818283838485858686878888898A8A8B8C8C8D8E8E8F>1 %_Br[0 0 0 0 1 52.2472 0 %_BS%_0 0 0 0 1 52.2472 0 Bs0.79 0 0.87 0.56 1 50 84.8315 %_BS%_0.79 0 0.87 0.56 1 50 84.8315 BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) Pc1 1 1 1 k([Registration]) Pc0 0 0 1 k([Passermarken]) Pc0.79 0 0.87 0.56 k(PANTONE 357 CVU) Pc1 0.65 0 0.3 k(PANTONE 288 CVU) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 3 79 79 255 0 100 Lb(Ebene 4) Ln0 Auq*u0 J 0 j 1 w 4 M []0 d0 XR179.1045 173.2236 m112.9414 173.2236 59.3047 226.8574 59.3047 293.0205 c59.3047 359.186 112.9414 412.8213 179.1045 412.8213 c245.2661 412.8213 298.9033 359.186 298.9033 293.0205 c298.9033 226.8574 245.2661 173.2236 179.1045 173.2236 chWn*U1 Ap0 O1 0.65 0 0.3 k269.1353 256.2832 m269.1353 229.2617 247.2305 207.3545 220.2061 207.3545 c193.1855 207.3545 171.2773 229.2617 171.2773 256.2832 c171.2773 283.3057 193.1855 305.2144 220.2061 305.2144 c247.2305 305.2144 269.1353 283.3057 269.1353 256.2832 cf*u0 Ap0 g336.0723 293.9971 m307.8164 201.7656 L308.3237 201.5039 L304.8467 194.7139 301.2178 191.5586 297.543 192.1299 c287.9102 193.626 281.437 220.9219 280.2285 228.1611 C279.916 230.1914 L279.3896 233.7217 L278.9414 236.4648 L278.3149 240.2256 277.1489 247.2246 276.5566 252.042 c275.4253 261.2432 274.48 274.542 279.2915 283.7188 c282.9741 290.7441 289.5601 294.3408 298.8706 294.4102 C308.5771 294.5313 L334.9028 294.8984 336.103 294.7725 336.4663 294.416 C335.6909 294.0791 L335.9395 294.0527 336.0723 294.0264 336.0723 293.9971 Cf1 D0 g270.5518 224.7695 m270.0742 227.1211 L267.9219 238.6045 264.9487 248.6221 261.8003 259.2334 c259.7935 265.9932 257.7197 272.9863 255.8491 280.4688 c253.7002 290.1436 255.2861 302.2192 266.1914 307.0688 C275.8896 310.7031 286.6606 311.7095 297.3105 309.9639 c309.0776 307.9087 316.1753 308.5132 318.9897 311.814 c319.981 312.9771 320.313 314.3154 320.313 315.6377 c320.313 317.2593 319.8159 318.8369 319.397 320.0625 C319.4136 320.1499 319.4316 320.2397 319.4316 320.3267 c319.4316 320.9595 319.124 321.5107 318.8916 321.7529 c318.542 322.1172 318.1821 321.9497 318.1152 321.9131 c317.9595 321.8306 317.8091 321.6504 317.8091 321.3896 c317.8091 321.3379 317.8159 321.2817 317.8286 321.2212 C318.2065 320.0332 318.2065 320.0273 V318.1982 320.0054 318.2017 319.9858 318.1919 319.9619 c317.7354 319.2114 314.7295 317.1938 295.0996 322.7759 c295.0864 322.7764 292.1836 323.54 Y283.7104 325.96 272.2656 326.4268 262.312 324.7563 c253.7949 323.3262 242.4614 319.7495 236.8188 310.8125 c234.3726 306.9355 233.4058 302.8887 233.4058 298.8008 c233.4058 289.916 237.9883 280.8701 241.9116 273.125 C242.4023 272.1553 L246.1016 264.8457 249.3433 257.6279 252.0386 250.7002 c254.9839 243.123 257.3994 235.5625 259.2178 228.2158 c260.2007 224.2539 261.1611 219.9063 262.1504 214.9189 c262.5835 212.7471 263.1152 209.8838 263.3979 206.9834 C263.3979 206.9775 263.5127 205.1406 Y263.9478 198.1074 264.0557 196.7773 264.916 196.4668 c265.1025 196.4033 265.4717 196.3506 265.8613 196.7646 c266.1001 197.0225 266.5874 197.1865 267.1465 197.376 c270.689 198.5664 273.9956 200.9482 272.1577 215.5176 c271.8174 218.6133 271.2026 221.6006 270.5518 224.7695 Cf0 g251.0801 227.3867 m246.3472 241.5771 239.6812 254.3408 231.2715 265.3096 C228.7007 268.6357 L222.3521 276.8203 215.7842 285.2803 212.4902 295.165 c210.4624 301.25 210.6733 307.2563 213.0825 312.0718 c217.521 320.9438 225.5801 328.0254 235.1968 331.4976 c241.5293 333.7832 248.4863 335.3794 255.875 336.2388 c262.8652 337.0547 270.2441 336.8608 278.4346 335.6499 c280.9331 335.2793 283.5171 334.77 286.1177 334.1401 c287.3179 333.8511 293.1567 332.2324 295.3545 331.6226 C295.9336 331.46 L296.4043 331.333 296.6138 331.6289 296.6646 331.7222 C296.8804 332.1172 L296.5454 332.4297 L296.5127 332.4624 296.0269 332.7241 295.4824 332.9268 C296.6006 333.397 299.0425 333.8887 300.791 334.2368 c305.4063 335.1631 308.0195 335.7539 308.0195 337.1782 c308.0195 337.1797 308.0195 337.1797 308.0195 337.1816 c308.0161 338.2446 306.9092 339.5947 293.6553 342.1934 c271.667 346.5059 243.2397 350.0269 218.3711 338.897 c211.21 335.6924 204.9707 331.6724 200.8066 327.5781 c194.2061 321.0845 190.8994 313.9805 190.8994 306.3438 c190.8994 301.5586 192.1963 296.5625 194.7964 291.377 c199.3301 282.335 206.4785 274.7422 213.3896 267.4023 c217.1543 263.4053 221.0469 259.2715 224.4209 254.9902 c234.0127 242.8154 240.2402 230.1162 244.0117 215.0234 c246.0039 207.0645 247.0503 200.3301 247.4067 193.1963 C247.4067 193.1943 247.4038 193.1895 247.4038 193.1865 c247.4038 193.1816 247.4067 193.1816 Y247.4067 193.1816 L247.4116 192.5088 248.3408 192.041 250.1709 191.7979 c252.6958 191.4521 255.7705 191.8711 256.1284 194.1709 c256.9482 199.4531 256.709 205.2451 255.3975 211.8857 c254.2988 217.4404 252.5977 222.8398 251.0801 227.3867 cf0 g228.5405 232.0283 m225.1909 237.9775 221.0078 243.6846 216.1016 248.9883 c208.7715 256.918 200.1396 263.6445 191.7891 270.1533 C189.0903 272.2568 L178.0513 280.8936 172.7637 289.332 172.458 298.8115 c172.2422 305.4702 173.9575 312.6768 177.165 318.5825 c182.4995 328.4023 191.6318 336.5454 205.085 343.4756 c217.1611 349.6992 230.6763 353.3291 245.2446 354.2617 c258.4102 355.104 272.8525 353.6543 289.395 349.8267 C289.6553 350.9365 L289.7813 350.9077 289.8496 350.8267 289.8594 350.7988 c289.7417 351.0293 289.7861 352.0313 289.8433 352.2959 c289.9937 352.9937 290.4253 353.6963 290.8291 354.2905 c291.5459 355.3594 292.4961 356.3013 293.4082 357.1729 C294.1738 357.9048 L293.1436 358.1426 L291.9185 358.4209 290.623 358.6655 289.4868 358.8296 C285.9409 359.3457 L283.5498 359.6992 L279.8999 360.2354 L276.9756 360.6665 L271.5376 361.4644 265.917 362.292 260.3545 362.7681 c257.252 363.0337 254.0566 363.1865 250.8511 363.2241 c238.8701 363.3613 227.8389 362.1646 218.0571 359.6655 c199.8467 355.0151 175.2368 344.0259 161.417 318.0957 c154.9556 305.9668 154.0039 292.8818 158.8086 282.1846 c164.4966 269.5244 177.2383 262.7568 187.4795 257.3164 c215.9673 242.1816 232.6406 211.9521 230.9888 178.4229 C230.9443 177.4561 L231.8145 177.8828 L233.0117 178.4707 234.3135 178.9053 235.5728 179.3262 c237.1953 179.8672 238.8701 180.4297 240.3975 181.3291 C240.6787 181.4941 L240.6787 181.8213 L240.6787 200.9053 236.708 217.3271 228.5405 232.0273 C228.5405 232.0283 Lf0 g196.4072 238.1182 m190.1177 243.1514 182.5615 246.3438 175.2578 249.4297 c162.0503 255.0117 149.5718 260.2852 144.5557 275.5693 c137.6831 296.5176 147.085 320.0913 159.4512 334.1606 c173.8774 350.5708 198.9751 363.6406 223.3906 367.4551 c239.0659 369.9067 255.1475 369.7637 271.186 367.0337 C292.2344 361.6396 293.0713 361.5635 295.5967 362.4258 c298.0874 363.2754 299.6001 365.002 299.4531 366.8247 c299.2241 369.6025 295.4268 371.811 289.0352 372.8862 c276.9199 374.9233 251.875 376.6855 248.7285 376.8252 c243.0566 377.0781 237.9116 377.064 232.9985 376.7803 c201.564 374.9683 172.9912 363.0244 154.5991 344.0127 c149.1753 338.4038 144.1748 331.7617 140.5229 325.3076 c127.5757 302.4316 125.3535 282.6455 133.7295 264.8164 c136.2432 259.4678 139.7231 254.4121 143.2778 250.9492 c150.814 243.6084 160.7842 239.9248 170.4253 236.3643 c175.0288 234.666 179.7881 232.9053 184.1333 230.7881 c195.8711 225.0645 204.8789 214.1416 209.5024 200.0322 c212.124 192.0264 213.3506 182.3252 212.7783 174.0859 C212.7241 173.2617 L213.5107 173.5 L214.644 173.8408 216.1016 172.292 217.5112 170.7891 c219.1758 169.0156 220.8999 167.1855 222.6987 167.8828 C223.0488 168.0166 L223.0615 168.3994 L223.2905 175.8965 222.4404 191.8486 220.3042 201.0723 c216.873 215.8848 209.0557 228 196.4072 238.1182 cf0 g202.7036 167.834 m202.5928 169.0205 202.5649 170.2441 202.5649 171.459 c202.5649 172.0713 202.5713 172.6797 202.5796 173.2813 c202.5845 173.8896 202.5928 174.5059 202.5928 175.126 c202.5928 176.001 202.5781 176.8877 202.5303 177.7578 c201.9941 187.21 199.9609 195.417 196.4858 202.1484 C196.4858 202.1514 196.4023 202.3115 y188.8027 216.8564 172.9746 222.8232 158.7349 227.2715 c144.7651 231.6387 133.291 240.1064 127.252 250.4932 c121.7397 259.9805 118.7095 271.6357 118.7095 283.0557 c118.7095 284.5352 118.7593 286.0049 118.8608 287.4678 c119.2524 293.0684 120.3091 301.2705 123.1152 308.5679 c131.5278 330.2056 145.8062 347.6558 165.5498 360.4302 c179.6655 369.5664 194.3091 375.5513 210.3149 378.7344 c226.9902 382.0488 245.7451 382.4634 267.6567 379.9995 C269.4658 379.7954 L268.0952 380.9966 L265.7402 383.0586 261.1182 387.3691 261.0728 387.4097 C260.9434 387.5308 L260.7715 387.5586 L260.4824 387.6021 253.6772 388.6616 250.3179 388.6431 c236.7813 388.5659 222.8081 388.4844 209.252 385.9248 c188.6357 382.0356 168.6084 373.1143 151.3267 360.126 c146.7407 356.6777 142.4087 352.8823 138.4434 348.8413 c130.8486 341.1025 124.2422 332.0054 119.8389 323.2271 c108.4497 300.5156 101.894 265.0068 120.896 239.6836 c127.8311 230.4434 137.8979 222.4238 150.8188 215.8555 c153.438 214.5234 156.1494 213.291 158.7725 212.0996 c165.7886 208.9082 173.0469 205.6104 178.8916 200.2041 c183.8638 195.6084 186.4053 190.3369 188.4102 185.3281 c190.4136 180.3154 189.7642 165.918 189.6826 164.2959 C189.6499 163.6367 L190.3057 163.6992 L191.7363 163.835 193.2607 163.6943 194.7378 163.5586 c196.6035 163.3916 198.5332 163.2139 200.3979 163.5557 c202.4438 163.9365 202.8594 164.8633 202.8594 166.0234 c202.8594 166.4063 202.8149 166.8096 202.7661 167.2314 C202.7036 167.834 Lf0 g103.686 377.4067 m118.7529 390.8481 134.8652 399.6953 150.0298 407.2524 c166.3364 415.3789 186.0254 421.3008 199.0537 425.2197 c211.5415 428.9751 215.8608 430.3545 215.8755 431.9478 c215.8838 432.7778 214.8779 433.0947 214.5508 433.2002 c199.7603 437.9365 148.4824 437.4673 127.1221 437.0488 c91.7188 436.3477 56.6987 434.3027 53.645 432.7549 c39.8975 425.7739 35.1851 399.3467 30.6279 373.7891 c27.8877 358.4175 25.2964 343.8965 20.8896 335.6753 c19.3462 332.7954 18.1846 320.0508 18.9199 305.6724 c19.4497 295.3252 21.4277 276.1416 28.7246 263.9512 c33.1636 256.5371 38.9116 252.7715 45.8081 252.7715 c48.6699 252.7715 48.6782 255.1611 48.6904 259.9199 c48.7134 268.6436 48.7607 286.7969 63.4512 320.3413 c73.6938 343.7231 86.8535 362.3892 103.686 377.4067 cf0 g176.1772 171.4248 m173.7598 187.2383 162.7681 194.5977 149.7261 201.9326 C147.6001 203.125 L142.3232 206.0742 136.8667 209.1221 132.1885 212.835 c110.165 230.3203 97.9336 259.876 101.0239 288.1377 c102.0469 297.4805 103.8916 305.1392 106.5132 310.9072 c119.2129 338.8608 136.4883 359.1279 159.3286 372.8682 c170.9941 379.8818 184.0322 385.23 198.0835 388.7617 c204.8398 390.4624 211.9536 391.748 219.2217 392.5874 c222.7642 392.9932 226.3945 393.2925 230.0044 393.4741 C232.5342 393.6455 L248.5337 394.7676 257.1572 395.0513 258.1646 394.4863 C258.7485 395.4692 L257.8755 395.9883 256.9316 396.7007 255.9341 397.4541 c253.7656 399.0908 251.3057 400.9478 248.9048 401.2236 c247.1421 401.4263 246.2588 401.0225 245.4019 400.6357 c244.7344 400.3281 244.0381 400.0132 242.7852 399.9512 c241.377 399.877 239.3374 399.9438 237.1738 400.0142 c234.4805 400.1025 231.6934 400.1924 229.8813 400.0176 c216.0488 398.6738 203.5933 397.2715 191.2197 393.73 c169.3408 387.4668 148.9346 376.5376 132.2139 362.1226 c127.5508 358.1025 123.1938 353.6133 119.2612 348.7793 c108.3521 335.3579 100.1733 320.3071 95.6104 305.2554 c90.5249 288.4824 89.8096 271.9063 93.4878 255.9902 c95.6538 246.6104 99.0762 237.4844 103.1255 230.2832 c112.6953 213.2715 126.2539 202.748 140.6094 191.6045 C145.9297 187.459 L151.4248 182.6494 155.1191 177.8896 157.1963 172.9297 C162.6519 158.5381 169.8872 151.041 178.6987 150.665 c178.8916 150.6563 179.0781 150.7363 179.209 150.8838 c179.6406 151.3779 179.4971 152.541 177.9468 161.2393 C176.1772 171.4248 Lf0 g101.3755 215.5059 m93.7573 226.959 88.71 239.0498 86.3745 251.4434 c84.7686 259.9639 84.0259 267.2266 84.1035 273.6396 C84.1152 274.3955 L84.3545 286.6973 86.9131 300.2412 91.5151 313.5649 c92.7803 317.2334 94.2349 320.7158 95.8403 323.9204 C97.792 327.4595 L102.9429 336.8242 107.3887 344.9082 114.6919 352.2109 C118.5762 356.1426 L123.5176 361.1772 128.1885 365.9351 133.6851 370.2451 c148.8389 382.1289 166.7993 391.4463 185.6235 397.1929 c190.8467 398.7866 196.3354 400.0977 201.9316 401.0845 c207.5806 402.0796 213.334 403.0225 218.9014 403.9365 C220.8623 404.2563 L229.1274 405.5967 L230.6665 405.9541 L231.9424 406.2817 233.8652 406.7749 234.5557 406.5156 C234.9595 407.5811 L234.9351 407.5942 234.9087 407.6064 V234.9712 407.9673 235.8999 408.8955 236.4165 409.4063 c237.3945 410.3794 238.188 411.1694 238.188 411.9121 c238.188 411.9946 238.1797 412.0771 238.1587 412.1582 c238.0913 412.418 237.8936 412.7593 237.3193 412.9268 c235.6973 413.4028 233.5059 412.9546 231.5728 412.561 C229.813 412.2314 L225.2861 411.6011 220.8569 410.9282 216.646 410.2339 c206.7466 408.605 196.5054 406.9165 186.397 404.2207 c178.7363 402.1748 170.7769 399.3232 162.7402 395.7471 c146.3833 388.4697 132.1265 379.4395 120.3638 368.9097 c116.8784 365.7891 113.4946 362.4287 110.3096 358.9238 c99.6499 347.0806 91.2437 333.8706 85.3218 319.6567 c72.7388 289.458 72.0396 256.1221 83.3984 228.1992 c84.2656 226.0664 90.0869 214.1553 95.3774 203.6846 c106.4043 181.8594 107.0103 181.9707 107.5967 182.0752 c116.374 183.6758 121.3325 180.752 128.1982 176.7041 c130.9541 175.0781 134.0767 173.2373 137.8276 171.499 C140.4189 170.293 L133.0352 178.3447 L122.4731 189.8184 108.0112 205.5313 101.3755 215.5059 cf76.1626 212.3301 m72.6079 231.6357 68.9717 251.4023 68.9717 271.1172 c68.9717 279.6836 69.6587 288.2383 71.3354 296.7432 c72.374 301.9961 73.8125 307.1523 75.6138 312.0693 c87.2173 343.7422 111.1416 372.2119 141.248 390.1787 c149.1563 394.896 157.502 398.9746 166.0469 402.2905 c169.9214 403.7954 173.9951 405.1724 178.4995 406.4985 c186.4019 408.8257 207.5547 414.8003 210.5342 414.5015 C210.6489 415.6392 L209.1572 415.7871 209.1084 416.4575 209.0229 417.5703 c208.9414 418.667 208.8169 420.3174 206.2363 420.3174 c202.7544 420.3174 198.6445 419.0791 195.0171 417.9873 C193.0186 417.3931 L182.5503 414.3691 170.2124 410.6616 158.0908 406.0669 c139.9741 399.2036 122.0889 387.5767 107.729 373.3345 c91.9849 357.7158 80.7427 342.6445 73.3628 327.2627 c68.4297 316.9795 64.7021 306.3242 62.5811 296.4434 c59.2344 280.8281 58.3716 264.5732 57.5352 248.8516 C57.0991 240.8799 L57.0361 239.7832 56.5161 238.7832 55.9692 237.7236 c55.2603 236.3564 54.5259 234.9434 54.812 233.2734 c55.1924 231.0537 55.0352 221.583 54.8701 211.5596 c54.6387 197.5801 54.4009 183.125 55.3345 180.1602 c55.5298 179.5303 55.9692 179.3652 56.2085 179.3262 c57.916 179.0283 61.1992 183.0771 67.7744 191.7383 c71.1753 196.2197 75.8315 202.3545 76.9468 202.4463 c76.9321 202.4443 76.9175 202.4688 76.897 202.4717 C76.9648 202.4854 77.1611 202.5176 77.3623 202.5557 C77.3623 202.5557 l77.3623 202.5557 L77.6377 202.6055 77.9248 202.6563 Y76.1626 212.3301 LBb0 0 0 0 Bh1 (Unnamed gradient) 221.3276 255.1655 142.373 110.5528 1 0 0 1 0 0 Bg-87.5581 67.4945 67.4945 87.5581 221.3276 255.1655 Bmf0 BB*UQ0 Au*u0 D0 O1 0.65 0 0.3 k0 J 0 j 1 w 4 M []0 d0 XR406.7471 304.2617 m377.3931 304.2617 359.439 324.0684 359.439 351 c359.439 378.7861 378.6758 399.0205 406.7471 399.0205 c418.1465 399.0205 429.1187 394.8882 434.2485 391.7534 c434.2485 378.0737 L428.8335 382.2061 417.2915 387.4785 406.3193 387.4785 c387.7954 387.4785 373.9731 374.084 373.9731 352.1396 c373.9731 332.0483 387.6528 316.2314 406.3193 316.2314 c417.5767 316.2314 427.6934 320.3638 434.2485 325.6357 c434.2485 311.6714 l429.1187 308.394 418.1465 304.2617 406.7471 304.2617 cf*U*u475.2842 303.9766 m464.3125 303.9766 452.2002 306.5415 447.7832 307.8242 c447.7832 396.0278 L454.0527 397.4531 463.4575 398.7354 474.1445 398.7354 c492.0986 398.7354 504.6382 389.4731 504.6382 376.2212 c504.6382 363.397 495.5186 356.8423 489.249 354.1348 c501.0757 351.1426 507.7729 342.8779 507.7729 330.3384 c507.7729 313.9512 494.0938 303.9766 475.2842 303.9766 cf1 D470.0122 388.6182 m461.3198 388.6182 L461.3198 356.5571 L469.5845 356.6997 481.6968 356.5571 y485.9717 359.4072 490.3887 365.249 490.3887 373.3716 c490.3887 382.6338 482.6943 388.6182 470.0122 388.6182 cf472.5771 347.2949 m461.3198 347.2949 L461.3198 316.8013 L462.6025 316.2314 466.3071 314.5215 473.5747 314.5215 c485.5439 314.5215 493.2388 320.791 493.2388 331.6206 c493.2388 342.4502 485.1167 347.2949 472.5771 347.2949 cf*U*u0 D581.583 308.394 m577.3081 305.9717 569.7559 303.9766 561.3491 303.9766 c530.9976 303.9766 512.6157 322.9287 512.6157 351 c512.6157 378.7861 533.2773 399.0205 561.3491 399.0205 c572.7485 399.0205 583.7207 394.8882 588.8501 391.7534 c588.8501 378.0737 L583.4355 382.2061 571.8936 387.4785 560.9214 387.4785 c542.397 387.4785 527.1504 373.0864 527.1504 352.1396 c527.1504 331.9058 540.4023 315.6611 560.9214 315.6611 c566.4785 315.6611 572.7485 316.3735 576.4531 317.9414 c576.4531 343.5903 L558.7842 343.5903 L563.0591 353.9922 L589.4204 353.9922 L589.4204 303.9766 L581.583 308.394 lf*UUu*u0 0 0 0.9 k384.9844 258.541 m384.9844 272.0728 L378.7544 263.8667 L372.4912 272.2734 L372.4912 258.541 L368.4048 258.541 L368.4048 277.4653 L366.395 280.0439 L372.0894 280.0439 L379.3237 270.5317 L386.7261 280.0439 L389.5732 280.0439 L389.5732 258.541 L384.9844 258.541 lf*U*u408.396 258.5073 m407.458 258.2061 406.5537 258.0723 406.0181 258.0723 c404.812 258.0723 403.3721 258.541 402.9702 259.8809 c401.396 258.541 400.0562 258.0723 398.1133 258.0723 c395.501 258.0723 394.0942 259.814 394.0942 261.9907 c394.0942 264.9048 396.7734 266.2109 399.3525 266.8809 c402.7021 267.752 L402.7021 269.8955 L402.7021 270.8667 402.4341 271.6035 401.5967 271.6035 c400.3911 271.6035 399.52 271.1348 397.5107 269.3931 c396.7734 268.7568 L394.6299 271.3691 L397.1084 273.5127 399.6206 274.3838 402.4009 274.3838 c405.7168 274.3838 407.0229 272.8428 406.9561 270.2305 c406.7549 262.0244 L406.7212 260.7183 407.8936 260.9189 408.8984 260.8188 C408.396 258.5073 lf1 D402.7021 265.4409 m400.1567 264.7373 L398.8169 264.3691 398.0464 263.6323 398.0464 262.6606 c398.0464 261.6226 398.8169 260.6846 400.3242 260.6846 c401.1948 260.6846 402.0659 260.9863 402.7021 261.3882 C402.7021 265.4409 lf*U*u0 D420.5205 266.6133 m425.6787 258.541 L420.688 258.541 L417.707 263.23 L414.4917 258.541 L410.439 258.541 L415.999 265.9097 L411.0083 273.7808 L415.8984 273.7808 L418.7456 269.3594 L421.7598 273.7808 L425.7119 273.7808 L420.5205 266.6133 lf*U*u445.5396 265.709 m444.8364 265.709 443.6641 265.9097 443.1279 266.1777 c443.1279 268.2876 L443.4297 268.2876 L446.4106 268.2876 447.4487 270.1636 447.4487 273.0103 c447.4487 275.5562 446.0757 276.7954 443.0278 276.7954 c441.3867 276.7954 L441.3867 258.541 L436.7979 258.541 L436.7979 279.5083 L438.2046 280.0107 440.8843 280.3789 443.5972 280.3789 c449.0903 280.3789 452.3057 277.6328 452.3057 272.9771 c452.3057 268.9575 449.291 265.709 445.5396 265.709 cf*U*u456.0229 258.541 m456.0229 281.1831 L460.2769 282.623 L460.2769 258.541 L456.0229 258.541 lf*U*u478.832 258.5073 m477.894 258.2061 476.9897 258.0723 476.4536 258.0723 c475.248 258.0723 473.8076 258.541 473.4058 259.8809 c471.8315 258.541 470.4917 258.0723 468.5493 258.0723 c465.9365 258.0723 464.5298 259.814 464.5298 261.9907 c464.5298 264.9048 467.2095 266.2109 469.7886 266.8809 c473.1377 267.752 L473.1377 269.8955 L473.1377 270.8667 472.8701 271.6035 472.0327 271.6035 c470.8267 271.6035 469.9561 271.1348 467.9463 269.3931 c467.2095 268.7568 L465.0659 271.3691 L467.5444 273.5127 470.0566 274.3838 472.8364 274.3838 c476.1523 274.3838 477.4585 272.8428 477.3916 270.2305 c477.1909 262.0244 L477.1572 260.7183 478.3296 260.9189 479.3345 260.8188 C478.832 258.5073 lf1 D473.1377 265.4409 m470.5923 264.7373 L469.2524 264.3691 468.4824 263.6323 468.4824 262.6606 c468.4824 261.6226 469.2524 260.6846 470.7598 260.6846 c471.6309 260.6846 472.5015 260.9863 473.1377 261.3882 C473.1377 265.4409 lf*U*u0 D492.3296 258.541 m492.3296 266.9482 L492.3296 269.125 492.3633 271.3691 489.6167 271.3691 c488.8799 271.3691 487.9082 271.0342 487.3389 270.7329 c487.3389 258.541 L483.0854 258.541 L483.0854 273.5127 L487.3389 274.5513 L487.3389 272.374 L488.5781 273.6133 490.2529 274.3838 491.6934 274.3838 c494.6074 274.3838 496.5835 272.7759 496.5835 269.5269 c496.5835 258.541 L492.3296 258.541 lf*U*u511.2866 269.0918 m509.0093 271.5703 L508.7412 271.5703 L506.9326 271.5703 504.9897 269.8618 504.9897 266.4458 c504.9897 263.5317 506.5977 261.7563 509.1099 261.7563 c510.6504 261.7563 511.8896 262.1919 513.062 262.8618 c512.124 258.8423 L510.7173 258.2729 509.7793 258.0723 508.2725 258.0723 c503.7173 258.0723 500.8364 261.2876 500.8364 265.9097 c500.8364 270.9673 504.0522 274.3838 508.7075 274.3838 c510.8848 274.3838 512.6265 273.6802 514.1338 271.3691 C511.2866 269.0918 lf*U*u517.7842 258.541 m517.7842 281.1831 L522.0381 282.623 L522.0381 258.541 L517.7842 258.541 lf527.5645 258.541 m526.4258 259.814 523.5786 264.3354 522.2388 266.8477 c527.4302 273.7808 L532.3203 273.7808 L526.3921 267.2832 L532.5215 258.541 L527.5645 258.541 lf*U*u543.875 258.541 m543.875 280.0439 L548.4639 280.0439 L548.4639 258.541 L543.875 258.541 lf*U*u563.2339 258.541 m563.2339 266.9482 L563.2339 269.125 563.2676 271.3691 560.521 271.3691 c559.7842 271.3691 558.813 271.0342 558.2437 270.7329 c558.2437 258.541 L553.9897 258.541 L553.9897 273.5127 L558.2437 274.5513 L558.2437 272.374 L559.4829 273.6133 561.1577 274.3838 562.5977 274.3838 c565.5117 274.3838 567.4878 272.7759 567.4878 269.5269 c567.4878 258.541 L563.2339 258.541 lf*U*u577.5688 258.0723 m576.0283 258.0723 574.2529 258.3398 571.9419 259.0771 c573.0474 262.3257 L574.3203 261.6558 576.0283 261.1201 577.4688 261.1201 c578.4063 261.1201 579.7129 261.2207 579.7129 262.5605 c579.7129 263.5986 578.9424 263.9673 577.8706 264.3691 c575.9614 265.0723 L573.8848 265.8428 572.1768 267.0483 572.1768 269.4937 c572.1768 273.2451 575.7939 274.417 579.1099 274.417 c581.6553 274.417 582.9614 273.7139 584.0332 273.4795 c582.9282 270.3979 L582.0571 270.8667 580.4829 271.4697 579.0762 271.4697 c577.8037 271.4697 576.5308 271.2686 576.5308 270.063 c576.5308 268.8574 577.4351 268.6226 578.7412 268.1538 c580.4497 267.5508 L582.4927 266.8477 584.2344 265.8428 584.2344 263.0293 c584.2344 259.814 581.2197 258.0723 577.5688 258.0723 cf*U*u596.8276 270.7329 m593.5449 270.7329 L593.5449 263.4312 L593.5449 261.6895 594.0142 261.4551 594.9854 261.4551 c595.8564 261.4551 596.2246 261.522 597.5981 261.9575 c596.8276 258.5747 L595.7559 258.3398 594.9854 258.0723 593.8799 258.0723 c590.7314 258.0723 589.459 259.6128 589.459 262.9624 c589.459 270.7329 L586.7124 270.7329 L587.3823 273.7139 L589.5928 273.7139 L589.5928 276.7954 L594.1816 278.6709 L593.7124 273.7139 L597.9331 273.7139 L596.8276 270.7329 lf*U*u603.9946 277.6328 m602.521 277.6328 601.4829 278.604 601.4829 279.9771 c601.4829 281.3169 602.521 282.2881 603.9946 282.2881 c605.4351 282.2881 606.5068 281.3506 606.5068 279.9771 c606.5068 278.5371 605.4014 277.6328 603.9946 277.6328 cf601.583 258.541 m601.583 273.5127 L605.8369 274.6519 L605.8369 258.541 L601.583 258.541 lf*U*u619.167 270.7329 m615.8848 270.7329 L615.8848 263.4312 L615.8848 261.6895 616.3535 261.4551 617.3247 261.4551 c618.1958 261.4551 618.564 261.522 619.9375 261.9575 c619.167 258.5747 L618.0952 258.3398 617.3247 258.0723 616.2197 258.0723 c613.0713 258.0723 611.7983 259.6128 611.7983 262.9624 c611.7983 270.7329 L609.0518 270.7329 L609.7217 273.7139 L611.9321 273.7139 L611.9321 276.7954 L616.521 278.6709 L616.0522 273.7139 L620.2725 273.7139 L619.167 270.7329 lf*U*u633.167 257.7373 m633.167 260.2158 L632.229 259.1772 630.8896 258.0723 628.8462 258.0723 c625.9321 258.0723 623.9229 259.6465 623.9229 262.895 c623.9229 273.5127 L628.21 274.4844 L628.21 264.4692 L628.21 261.79 628.6787 261.0532 630.5879 261.0532 c631.6265 261.0532 632.4971 261.4551 633.167 261.9907 c633.167 273.5127 L637.4541 274.5176 L637.4541 259.144 L633.167 257.7373 lf*U*u650.7847 270.7329 m647.502 270.7329 L647.502 263.4312 L647.502 261.6895 647.9712 261.4551 648.9424 261.4551 c649.8135 261.4551 650.1816 261.522 651.5547 261.9575 c650.7847 258.5747 L649.7129 258.3398 648.9424 258.0723 647.8369 258.0723 c644.6885 258.0723 643.416 259.6128 643.416 262.9624 c643.416 270.7329 L640.6694 270.7329 L641.3394 273.7139 L643.5498 273.7139 L643.5498 276.7954 L648.1387 278.6709 L647.6694 273.7139 L651.8896 273.7139 L650.7847 270.7329 lf*U*u668.0669 266.2446 m658.521 265.9766 L658.521 265.6084 L658.521 263.6992 659.9277 261.6558 662.7412 261.6558 c664.7178 261.6558 666.3589 262.2588 667.5645 262.9624 c666.7607 259.0098 L665.3872 258.3735 663.7798 258.0723 662.0381 258.0723 c657.7173 258.0723 654.5352 260.8188 654.5352 266.0435 c654.5352 270.3643 657.0137 274.3838 662.2725 274.3838 c665.8896 274.3838 668.3682 272.4746 668.3682 268.79 c668.3682 268.1875 668.3682 267.2832 668.0669 266.2446 cf1 D662.2056 271.8047 m660.397 271.8047 659.0234 270.1299 658.7891 268.355 c664.2485 268.5557 L664.3154 268.8237 664.3154 269.3594 664.3154 269.5605 c664.3154 270.6992 663.5117 271.8047 662.2056 271.8047 cf*U*u0 D373.7974 218.0781 m369.4434 218.0781 366.9644 221.0591 366.9644 225.4468 c366.9644 231.2412 370.0796 234.3896 375.3716 234.3896 c379.7256 234.3896 382.2378 231.4087 382.2378 226.9878 c382.2378 221.4946 379.4912 218.0781 373.7974 218.0781 cf1 D374.5342 231.6099 m372.7925 231.6099 371.3857 229.5669 371.3857 226.5186 c371.3857 222.7007 372.5581 220.8247 374.7017 220.8247 c376.4097 220.8247 377.8164 222.8682 377.8164 226.0498 c377.8164 229.7676 376.6777 231.6099 374.5342 231.6099 cf*U*u0 D397.8457 238.6104 m394.8984 239.7822 L394.1279 239.7822 L392.8555 239.7822 391.6494 238.811 391.6494 235.9307 c391.6494 233.6528 L395.4346 233.6528 L394.3623 230.6387 L391.6831 230.6387 L391.6831 218.5474 L387.4292 218.5474 L387.4292 230.6387 L384.6157 230.6387 L385.3862 233.6528 L387.4292 233.6528 L387.4292 234.5908 L387.4292 239.4473 389.9746 242.5957 394.7979 242.5957 c396.3052 242.5957 397.8125 242.3281 399.3198 241.6245 C397.8457 238.6104 lf*U*u423.8032 218.5474 m423.8032 232.0786 L417.5732 223.8726 L411.3101 232.2798 L411.3101 218.5474 L407.2236 218.5474 L407.2236 237.4712 L405.2139 240.0503 L410.9077 240.0503 L418.1426 230.5381 L425.5449 240.0503 L428.3916 240.0503 L428.3916 218.5474 L423.8032 218.5474 lf*U*u439.7456 218.0781 m435.3916 218.0781 432.9131 221.0591 432.9131 225.4468 c432.9131 231.2412 436.0278 234.3896 441.3198 234.3896 c445.6743 234.3896 448.186 231.4087 448.186 226.9878 c448.186 221.4946 445.4395 218.0781 439.7456 218.0781 cf1 D440.4824 231.6099 m438.7407 231.6099 437.334 229.5669 437.334 226.5186 c437.334 222.7007 438.5063 220.8247 440.6499 220.8247 c442.3584 220.8247 443.7651 222.8682 443.7651 226.0498 c443.7651 229.7676 442.626 231.6099 440.4824 231.6099 cf*U*u0 D452.4399 218.5474 m452.4399 241.189 L456.6934 242.6294 L456.6934 218.5474 L452.4399 218.5474 lf*U*u474.4785 226.251 m464.9326 225.9829 L464.9326 225.6143 L464.9326 223.7051 466.3394 221.6621 469.1528 221.6621 c471.1289 221.6621 472.77 222.2651 473.9761 222.9683 c473.1724 219.0161 L471.7988 218.3799 470.1914 218.0781 468.4497 218.0781 c464.1289 218.0781 460.9468 220.8247 460.9468 226.0498 c460.9468 230.3706 463.4253 234.3896 468.6841 234.3896 c472.3013 234.3896 474.7798 232.481 474.7798 228.7964 c474.7798 228.1934 474.7798 227.2891 474.4785 226.251 cf1 D468.6172 231.811 m466.8081 231.811 465.4351 230.1362 465.2007 228.3608 c470.6602 228.562 L470.7271 228.8301 470.7271 229.3657 470.7271 229.5669 c470.7271 230.7056 469.9233 231.811 468.6172 231.811 cf*U*u0 D488.6128 229.0977 m486.335 231.5762 L486.0674 231.5762 L484.2583 231.5762 482.3159 229.8682 482.3159 226.4517 c482.3159 223.5381 483.9233 221.7627 486.4355 221.7627 c487.9766 221.7627 489.2158 222.1982 490.3877 222.8682 c489.4502 218.8486 L488.0435 218.2793 487.1055 218.0781 485.5981 218.0781 c481.043 218.0781 478.1626 221.2939 478.1626 225.916 c478.1626 230.9736 481.3779 234.3896 486.0337 234.3896 c488.2109 234.3896 489.9526 233.6865 491.4595 231.3755 C488.6128 229.0977 lf*U*u504.3545 217.7432 m504.3545 220.2222 L503.4165 219.1836 502.0767 218.0781 500.0337 218.0781 c497.1196 218.0781 495.1099 219.6523 495.1099 222.9014 c495.1099 233.519 L499.3975 234.4902 L499.3975 224.4756 L499.3975 221.7964 499.8662 221.0591 501.7754 221.0591 c502.8135 221.0591 503.6846 221.4614 504.3545 221.9971 c504.3545 233.519 L508.6416 234.5239 L508.6416 219.1499 L504.3545 217.7432 lf*U*u513.8999 218.5474 m513.8999 241.189 L518.1538 242.6294 L518.1538 218.5474 L513.8999 218.5474 lf*U*u536.709 218.5137 m535.771 218.2124 534.8667 218.0781 534.3306 218.0781 c533.125 218.0781 531.6846 218.5474 531.2827 219.8872 c529.7085 218.5474 528.3687 218.0781 526.4263 218.0781 c523.8135 218.0781 522.4067 219.8198 522.4067 221.9971 c522.4067 224.9111 525.0864 226.2173 527.6655 226.8872 c531.0146 227.7583 L531.0146 229.9019 L531.0146 230.873 530.7471 231.6099 529.9097 231.6099 c528.7036 231.6099 527.833 231.1411 525.8232 229.3994 c525.0864 228.7627 L522.9429 231.3755 L525.4214 233.519 527.9336 234.3896 530.7134 234.3896 c534.0293 234.3896 535.3354 232.8491 535.2686 230.2368 c535.0679 222.0308 L535.0342 220.7241 536.2065 220.9253 537.2114 220.8247 C536.709 218.5137 lf1 D531.0146 225.4468 m528.4692 224.7437 L527.1294 224.375 526.3594 223.6382 526.3594 222.667 c526.3594 221.6289 527.1294 220.6909 528.6367 220.6909 c529.5078 220.6909 530.3784 220.9922 531.0146 221.394 C531.0146 225.4468 lf*U*u0 D549.4028 229.667 m547.3931 230.9736 L546.4219 230.9736 545.6851 230.002 545.2158 229.3994 c545.2158 218.5474 L540.9624 218.5474 L540.9624 233.519 L545.2158 234.4902 L545.2158 231.2749 L546.2876 232.7485 547.6274 234.3896 548.7666 234.3896 c550.2065 234.3896 550.9434 233.854 551.6133 233.0503 C549.4028 229.667 lf*U*u572.5801 218.1455 m565.5459 218.1455 560.9907 222.8008 560.9907 229.1313 c560.9907 235.6626 565.8477 240.4189 572.5801 240.4189 c575.3936 240.4189 577.5371 239.9497 579.2451 239.0454 c579.2451 234.5239 L577.1016 235.9307 575.3599 236.5337 572.8145 236.5337 c568.8618 236.5337 565.814 233.6528 565.814 229.3994 c565.814 225.5142 568.6611 222.1309 572.4795 222.1309 c574.958 222.1309 576.9004 222.4658 579.2451 224.2749 c579.2451 219.7866 l577.4365 218.5137 575.1924 218.1455 572.5801 218.1455 cf*U*u596.6284 226.251 m587.0825 225.9829 L587.0825 225.6143 L587.0825 223.7051 588.4893 221.6621 591.3027 221.6621 c593.2788 221.6621 594.9204 222.2651 596.126 222.9683 c595.3223 219.0161 L593.9487 218.3799 592.3413 218.0781 590.5996 218.0781 c586.2788 218.0781 583.0967 220.8247 583.0967 226.0498 c583.0967 230.3706 585.5752 234.3896 590.834 234.3896 c594.4512 234.3896 596.9297 232.481 596.9297 228.7964 c596.9297 228.1934 596.9297 227.2891 596.6284 226.251 cf1 D590.7671 231.811 m588.9585 231.811 587.585 230.1362 587.3506 228.3608 c592.8101 228.562 L592.877 228.8301 592.877 229.3657 592.877 229.5669 c592.877 230.7056 592.0732 231.811 590.7671 231.811 cf*U*u0 D601.3174 218.5474 m601.3174 241.189 L605.5713 242.6294 L605.5713 218.5474 L601.3174 218.5474 lf*U*u610.8291 218.5474 m610.8291 241.189 L615.083 242.6294 L615.083 218.5474 L610.8291 218.5474 lf*U*u636.0156 218.0781 m633.3696 218.0781 630.0874 218.5474 628.3789 219.083 c628.3789 239.6147 L630.4556 240.0503 633.001 240.3521 635.5469 240.3521 c640.0684 240.3521 643.418 238.3423 643.418 234.7246 c643.418 232.3467 642.0444 230.8062 640.437 229.9688 c642.8818 229.0977 644.3555 227.2222 644.3555 224.5762 c644.3555 220.4229 640.9058 218.0781 636.0156 218.0781 cf1 D635.1113 236.7681 m632.9678 236.7681 L632.9678 230.7725 L637.0874 230.7725 L637.7236 231.2412 638.6616 232.6484 638.6616 234.0884 c638.6616 235.5957 637.7573 236.7681 635.1113 236.7681 cf635.0444 227.5908 m632.9678 227.5908 L632.9678 222.064 L633.4702 221.9302 634.4751 221.729 635.6138 221.729 c638.1592 221.729 639.5327 222.7676 639.5327 224.8442 c639.5327 226.7866 637.8579 227.5908 635.0444 227.5908 cf*U*u0 D651.0205 237.6387 m649.5469 237.6387 648.5083 238.6104 648.5083 239.9834 c648.5083 241.3232 649.5469 242.2944 651.0205 242.2944 c652.4609 242.2944 653.5327 241.3564 653.5327 239.9834 c653.5327 238.543 652.4272 237.6387 651.0205 237.6387 cf648.6089 218.5474 m648.6089 233.519 L652.8628 234.6577 L652.8628 218.5474 L648.6089 218.5474 lf*U*u663.9487 218.0781 m659.5947 218.0781 657.1162 221.0591 657.1162 225.4468 c657.1162 231.2412 660.231 234.3896 665.5229 234.3896 c669.877 234.3896 672.3892 231.4087 672.3892 226.9878 c672.3892 221.4946 669.6426 218.0781 663.9487 218.0781 cf1 D664.6855 231.6099 m662.9438 231.6099 661.5371 229.5669 661.5371 226.5186 c661.5371 222.7007 662.7095 220.8247 664.853 220.8247 c666.5615 220.8247 667.9678 222.8682 667.9678 226.0498 c667.9678 229.7676 666.8291 231.6099 664.6855 231.6099 cf*U*u0 D676.6431 218.5474 m676.6431 241.189 L680.8965 242.6294 L680.8965 218.5474 L676.6431 218.5474 lf*U*u691.9824 218.0781 m687.6284 218.0781 685.1499 221.0591 685.1499 225.4468 c685.1499 231.2412 688.2646 234.3896 693.5566 234.3896 c697.9111 234.3896 700.4229 231.4087 700.4229 226.9878 c700.4229 221.4946 697.6768 218.0781 691.9824 218.0781 cf1 D692.7197 231.6099 m690.9775 231.6099 689.5713 229.5669 689.5713 226.5186 c689.5713 222.7007 690.7432 220.8247 692.8867 220.8247 c694.5952 220.8247 696.002 222.8682 696.002 226.0498 c696.002 229.7676 694.8633 231.6099 692.7197 231.6099 cf*U*u0 D719.9165 230.2368 m718.4429 230.2368 L718.5435 225.8491 715.6963 223.3032 711.1411 223.3032 c710.3037 223.3032 709.4663 223.4038 708.6289 223.6382 c708.3945 223.4707 708.0596 223.1025 708.0596 222.5664 c708.0596 221.6621 708.7632 221.0928 710.4712 221.0928 c714.4902 221.0928 L716.7012 221.0928 719.3472 220.0879 719.3472 217.3081 c719.3472 213.8247 715.6963 211.0444 710.0693 211.0444 c706.7871 211.0444 703.5713 211.8149 703.5713 215.0303 c703.5713 216.8726 705.313 218.0449 707.1553 218.4805 c705.6147 218.8823 704.8442 220.021 704.8442 221.1597 c704.8442 222.4326 706.0498 223.4707 707.2891 224.04 c705.313 224.71 703.7388 226.6191 703.7388 228.5283 c703.7388 233.0503 707.2891 234.3896 711.4761 234.3896 c713.1172 234.3896 714.7583 233.8203 715.6294 233.519 c720.8208 233.519 L719.9165 230.2368 lf1 D712.749 217.6431 m708.1602 217.8438 L707.7583 217.4756 707.4233 216.772 707.4233 216.0688 c707.4233 214.1929 708.897 213.2554 710.9736 213.2554 c714.3232 213.2554 715.1602 214.8628 715.1602 216.2363 c715.1602 217.0737 714.6577 217.5757 712.749 217.6431 cf713.9546 231.3755 m713.2847 231.6768 712.5142 231.9111 711.4424 231.9111 c709.3657 231.9111 707.8921 230.7056 707.8921 228.7627 c707.8921 226.7534 709.2319 225.5474 711.1748 225.5474 c713.2178 225.5474 714.189 227.3228 714.189 229.2319 c714.189 230.002 714.1553 230.7056 713.9546 231.3755 cf*U*u0 D730.4331 218.5474 m728.9927 214.7959 727.3516 211.4131 722.9639 211.4131 c721.7583 215.6333 L723.5 215.6333 L725.5093 215.6333 726.6484 215.7339 727.2178 217.6763 c721.624 233.7871 L726.1123 233.7871 L729.3276 224.1406 L732.5767 233.7871 L736.3281 233.7871 L730.4331 218.5474 lf*U*u381.2666 178.52 m380.3286 178.2183 379.4243 178.0845 378.8887 178.0845 c377.6826 178.0845 376.2422 178.5532 375.8403 179.8931 c374.2661 178.5532 372.9263 178.0845 370.9839 178.0845 c368.3711 178.0845 366.9644 179.8262 366.9644 182.0034 c366.9644 184.9175 369.644 186.2236 372.2231 186.8936 c375.5728 187.7642 L375.5728 189.9077 L375.5728 190.8794 375.3047 191.6162 374.4673 191.6162 c373.2612 191.6162 372.3906 191.147 370.3809 189.4053 c369.644 188.769 L367.5005 191.3818 L369.979 193.5254 372.4912 194.396 375.271 194.396 c378.5869 194.396 379.8931 192.8555 379.8262 190.2427 c379.6255 182.0366 L379.5918 180.7305 380.7642 180.9316 381.769 180.8311 C381.2666 178.52 lf1 D375.5728 185.4531 m373.0269 184.75 L371.687 184.3813 370.917 183.6445 370.917 182.6733 c370.917 181.6348 371.687 180.6973 373.1943 180.6973 c374.0654 180.6973 374.936 180.9985 375.5728 181.4004 C375.5728 185.4531 lf*U*u0 D394.7642 178.5532 m394.7642 186.9604 L394.7642 189.1377 394.7979 191.3818 392.0513 191.3818 c391.3145 191.3818 390.3433 191.0469 389.7734 190.7451 c389.7734 178.5532 L385.52 178.5532 L385.52 193.5254 L389.7734 194.5635 L389.7734 192.3862 L391.0127 193.626 392.6875 194.396 394.1279 194.396 c397.042 194.396 399.0181 192.7886 399.0181 189.5396 c399.0181 178.5532 L394.7642 178.5532 lf*U*u413.9224 177.7163 m413.9224 179.9937 L412.6494 178.7207 411.1421 178.1182 409.9028 178.1182 c405.6157 178.1182 403.271 181.1323 403.271 185.8887 c403.271 191.1138 407.0562 194.396 411.377 194.396 c412.2476 194.396 412.7837 194.2954 413.7549 193.9604 c413.7549 201.4634 L418.0088 202.7695 L418.0088 179.0557 L413.9224 177.7163 lf1 D413.7549 188.9365 m413.7549 190.7119 412.8169 191.75 411.3096 191.75 c409.7021 191.75 407.5586 190.3433 407.5586 186.793 c407.5586 183.4102 408.6304 181.166 412.147 181.166 c412.8838 181.166 413.2861 181.2998 413.7549 181.5342 C413.7549 188.9365 lf*U*u0 D446.3101 179.0894 m445.2383 178.5532 443.6641 178.0845 441.5205 178.0845 c434.0176 178.0845 429.6973 182.5391 429.6973 189.1377 c429.6973 195.6689 434.5537 200.4248 441.5205 200.4248 c444.334 200.4248 447.0469 199.8223 448.688 198.8506 c448.688 194.1279 L446.377 195.7695 443.7979 196.5396 441.4199 196.5396 c437.4678 196.5396 434.52 193.6592 434.52 189.4053 c434.52 185.2188 437.1328 181.8691 441.4868 181.8691 c442.5254 181.8691 443.5303 182.0366 444.3677 182.2378 c444.3677 186.4917 L440.2144 186.4917 L441.4536 190.1426 L448.8223 190.1426 L448.8223 178.0845 L446.3101 179.0894 lf*U*u466.875 186.2568 m457.3291 185.9893 L457.3291 185.6206 L457.3291 183.7114 458.7358 181.6685 461.5493 181.6685 c463.5254 181.6685 465.167 182.2715 466.3726 182.9746 c465.5688 179.0225 L464.1953 178.3857 462.5879 178.0845 460.8462 178.0845 c456.5254 178.0845 453.3433 180.8311 453.3433 186.0562 c453.3433 190.377 455.8218 194.396 461.0806 194.396 c464.6978 194.396 467.1763 192.4868 467.1763 188.8027 c467.1763 188.1997 467.1763 187.2954 466.875 186.2568 cf1 D461.0137 191.8169 m459.2046 191.8169 457.8315 190.1426 457.5972 188.3672 c463.0566 188.5684 L463.1235 188.8359 463.1235 189.3721 463.1235 189.5728 c463.1235 190.7119 462.3198 191.8169 461.0137 191.8169 cf*U*u0 D480.8081 178.5532 m480.8081 186.9604 L480.8081 189.1377 480.8418 191.3818 478.0952 191.3818 c477.3584 191.3818 476.3872 191.0469 475.8179 190.7451 c475.8179 178.5532 L471.564 178.5532 L471.564 193.5254 L475.8179 194.5635 L475.8179 192.3862 L477.0571 193.626 478.7314 194.396 480.1719 194.396 c483.0859 194.396 485.062 192.7886 485.062 189.5396 c485.062 178.5532 L480.8081 178.5532 lf*U*u502.8467 186.2568 m493.3013 185.9893 L493.3013 185.6206 L493.3013 183.7114 494.708 181.6685 497.5215 181.6685 c499.4976 181.6685 501.1387 182.2715 502.3442 182.9746 c501.5405 179.0225 L500.1675 178.3857 498.5596 178.0845 496.8179 178.0845 c492.4971 178.0845 489.3154 180.8311 489.3154 186.0562 c489.3154 190.377 491.7939 194.396 497.0522 194.396 c500.6699 194.396 503.1484 192.4868 503.1484 188.8027 c503.1484 188.1997 503.1484 187.2954 502.8467 186.2568 cf1 D496.9854 191.8169 m495.1768 191.8169 493.8032 190.1426 493.5688 188.3672 c499.0283 188.5684 L499.0957 188.8359 499.0957 189.3721 499.0957 189.5728 c499.0957 190.7119 498.2915 191.8169 496.9854 191.8169 cf*U*u0 D515.6079 190.7451 m512.3257 190.7451 L512.3257 183.4434 L512.3257 181.7017 512.7944 181.4673 513.7656 181.4673 c514.6367 181.4673 515.0049 181.5342 516.3784 181.9697 c515.6079 178.5869 L514.5361 178.3525 513.7656 178.0845 512.6606 178.0845 c509.5122 178.0845 508.2393 179.625 508.2393 182.9746 c508.2393 190.7451 L505.4927 190.7451 L506.1626 193.7261 L508.373 193.7261 L508.373 196.8076 L512.9619 198.6831 L512.4932 193.7261 L516.7134 193.7261 L515.6079 190.7451 lf*U*u522.7749 197.645 m521.3013 197.645 520.2632 198.6162 520.2632 199.9897 c520.2632 201.3291 521.3013 202.3008 522.7749 202.3008 c524.2153 202.3008 525.2871 201.3628 525.2871 199.9897 c525.2871 198.5493 524.1816 197.645 522.7749 197.645 cf520.3633 178.5532 m520.3633 193.5254 L524.6172 194.6641 L524.6172 178.5532 L520.3633 178.5532 lf*U*u539.3208 189.104 m537.043 191.5825 L536.7749 191.5825 L534.9663 191.5825 533.0239 189.8745 533.0239 186.458 c533.0239 183.5439 534.6313 181.769 537.1436 181.769 c538.6841 181.769 539.9233 182.2041 541.0957 182.874 c540.1582 178.855 L538.751 178.2856 537.8135 178.0845 536.3062 178.0845 c531.751 178.0845 528.8706 181.2998 528.8706 185.9219 c528.8706 190.9795 532.0859 194.396 536.7417 194.396 c538.9189 194.396 540.6602 193.6929 542.1675 191.3818 C539.3208 189.104 lf*U*u550.6411 178.0845 m549.1006 178.0845 547.3252 178.3525 545.0142 179.0894 c546.1196 182.3384 L547.3921 181.6685 549.1006 181.1323 550.5405 181.1323 c551.4785 181.1323 552.7847 181.2329 552.7847 182.5728 c552.7847 183.6108 552.0142 183.9795 550.9424 184.3813 c549.0332 185.085 L546.957 185.855 545.2485 187.061 545.2485 189.5059 c545.2485 193.2573 548.8657 194.4297 552.1816 194.4297 c554.7275 194.4297 556.0337 193.7261 557.1055 193.4917 c556 190.4102 L555.1294 190.8794 553.5552 191.4819 552.1484 191.4819 c550.8755 191.4819 549.603 191.2813 549.603 190.0752 c549.603 188.8696 550.5073 188.6353 551.8135 188.166 c553.5215 187.5635 L555.5649 186.8599 557.3066 185.855 557.3066 183.0415 c557.3066 179.8262 554.292 178.0845 550.6411 178.0845 cf*UU1 Ap1 0.65 0 0.3 k335.8105 154.6143 m328.353 154.6143 L328.353 433.1074 L335.8105 433.1074 L335.8105 154.6143 LfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAGM_Gradient /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF